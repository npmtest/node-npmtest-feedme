{"/home/travis/build/npmtest/node-npmtest-feedme/test.js":"/* istanbul instrument in package npmtest_feedme */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-feedme/lib.npmtest_feedme.js":"/* istanbul instrument in package npmtest_feedme */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_feedme = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_feedme = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-feedme/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-feedme && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_feedme */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_feedme\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_feedme.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_feedme.rollup.js'] =\n            local.assetsDict['/assets.npmtest_feedme.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_feedme.__dirname + '/lib.npmtest_feedme.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-feedme/node_modules/feedme/lib/feedme.js":"var EventYoshi = require('eventyoshi');\nvar XMLFeedParser = require('./xmlfeedparser');\nvar JSONFeedParser = require('./jsonfeedparser');\n\n\n/**\n * Creates an instance of a parser. Parser can be JSON/XML.\n *\n * @param (Boolean) buffer If true, feed will be buffered into memory\n *   and can be retrieved using `parser.end()` on end.\n * @returns (Stream)\n */\nmodule.exports = function(buffer) {\n  var yoshi = new EventYoshi();\n  var parser;\n\n  // Make yoshi behave stream like.\n  yoshi.writable = true;\n\n  // First find out what type of feed this is.\n  yoshi.write = function(data) {\n    var str = data.toString();\n    var startParsing = false;\n\n    if (/^\\s*</.test(str)) {\n      startParsing = true;\n      parser = XMLFeedParser(buffer);\n\n    } else if (/^\\s*[\\{\\[]/.test(str)) {\n      startParsing = true;\n      parser = JSONFeedParser(buffer);\n      yoshi.emit('type', 'json');\n\n    } else {\n      yoshi.emit('error', new Error('Not a correctly formatted feed'));\n    }\n\n    if (startParsing) {\n      yoshi.add(parser);\n      yoshi.proxy('write', 'end', 'done', 'close');\n      parser.write(data);\n    }\n\n  };\n\n  // In case `end()` is called right away.\n  yoshi.end = function(data) {\n    if (data && data.length) {\n      yoshi.write(data);\n    } else {\n      yoshi.emit('end');\n    }\n  };\n\n  return yoshi;\n};\n","/home/travis/build/npmtest/node-npmtest-feedme/node_modules/feedme/lib/xmlfeedparser.js":"var sax = require('sax');\n\n\n/**\n * If this object has text, and there is no other children,\n * or the only other key is type, make the object the text.\n *\n * @param (Object) obj\n * @returns (Object)\n */\nfunction cleanObj(obj) {\n  var keys = Object.keys(obj).length;\n  if (obj.text != null) {\n    // if this tag has text, trim it\n    obj.text = trimIndent(obj.text);\n\n    if (keys === 1 || (keys === 2 && obj.type != null)) {\n      obj = obj.text;\n    }\n  } else if (keys === 0) {\n    obj = '';\n  }\n\n  return obj;\n}\n\n\n/**\n * Trims the indent from text that sax-js emits. Some xml feeds will\n * add indent to multiline text. Example:\n *\n *     <item>\n *       The big brown fox\n *       jumped over the lazy dog\n *     </item>\n *\n * @param (String) str\n * @returns (String)\n */\nfunction trimIndent(str) {\n  var split = str.split('\\n'), rs;\n\n  // The last line should be indented and only contain whitespace.\n  if (split.length > 1 &&\n     (rs = /^((?: {3})+|(?: {2})+|(?: {4})+|(?:\\t)+)$/m.exec(\n        split[split.length - 1]))) {\n\n    // The very first line should be empty.\n    if (split.shift() !== '') {\n      return str;\n    }\n\n    // Remove the last line, as it's only whitespace.\n    split.pop();\n\n    var wholeindent = rs[0] + rs[1];\n\n    // Remove indent from beginning of every line.\n    for (var i = 0, l = split.length; i < l; i++) {\n      var s = split[i];\n      if (s.indexOf(wholeindent) !== 0) {\n        return str;\n      }\n      split[i] = s.substr(wholeindent.length);\n    }\n\n    str = split.join('\\n');\n  }\n\n  return str;\n}\n\n\n/**\n * Parses an RSS/Atom feed.\n *\n * @param (Boolean) buffer If true, will buffer entire object.\n * @return (sax.Stream)\n */\nmodule.exports = function(buffer) {\n  var parser = sax.createStream(false, { lowercasetags: true });\n\n  var stack = [];\n  var obj = {};\n\n  // First start listening for the root tag.\n  var openf1 = function(node) {\n    var type;\n    if (node.name === 'channel' || node.name === 'feed') {\n      if (node.name === 'feed') {\n        type = 'atom';\n        obj.type = type;\n        this.emit('type', type);\n      }\n      parser.removeListener('opentag', openf1);\n      parser.on('text', ontext);\n      parser.on('cdata', ontext);\n      parser.on('opentag', onopentag);\n      parser.on('closetag', onclosetag);\n\n    } else if (node.name === 'rss') {\n      type = 'rss ' + node.attributes.version;\n      obj.type = type;\n      this.emit('type', type);\n    } else {\n      parser.emit('error', new Error('Feed type not recognized'));\n      parser.close();\n    }\n  };\n  parser.on('opentag', openf1);\n\n  function ontext(text) {\n    // Make sure text events are text and not just whitespace.\n    var rs = /\\n(( {3})+|( {2})+|( {4})+|(\\t)+)$/m.exec(text);\n    if (rs !== null && rs.index === 0 && rs[0] === rs.input) { return; }\n    if (obj.text == null) { obj.text = ''; }\n    obj.text += text;\n  }\n\n  // After the root is found, start storing the rest of the document.\n  function onopentag(node) {\n    var key = node.name;\n    var i;\n\n    if (obj[key]) {\n      if (!Array.isArray(obj[key])) {\n        obj[key] = [obj[key], node.attributes];\n        i = 1;\n      } else {\n        i = obj[key].push(node.attributes) - 1;\n      }\n\n    } else {\n      obj[key] = node.attributes;\n    }\n\n    stack.push({ obj: obj, key: key, i: i });\n    obj = i ? obj[key][i] : obj[key];\n  }\n\n  function onclosetag() {\n    var parent = stack.pop();\n    if (!parent) { return; }\n\n    obj = parent.obj;\n    var key = parent.key;\n    var data = parent.i ?\n      obj[key][parent.i] = cleanObj(obj[key][parent.i]) :\n      obj[key] = cleanObj(obj[key]);\n\n    if (!stack.length) {\n      key = key === 'entry' || key === 'items' ? 'item' : key;\n      parser.emit(key, data);\n      if (!buffer) { delete obj[key]; }\n    }\n  }\n\n  // Called when done parsing the document.\n  // Returns entire document in object form.\n  parser.done = function() {\n    if (!buffer) { return; }\n    var items;\n    if (obj.item != null) {\n      items = obj.item;\n      delete obj.item;\n    } else if (obj.entry != null) {\n      items = obj.entry;\n      delete obj.entry;\n    } else {\n      items = [];\n    }\n    if (!Array.isArray(items)){\n      items = [items];\n    }\n    obj.items = items;\n    delete obj.text;\n    return obj;\n  };\n\n  return parser;\n};\n","/home/travis/build/npmtest/node-npmtest-feedme/node_modules/feedme/lib/jsonfeedparser.js":"var clarinet = require('clarinet');\n\n/**\n * Gets rid of unnecessary keys in an object\n * and if the only keys in an object are `$t` or `$t` and `type`\n * it makes the whole object the value of `$t`\n * otherwise it renames `$t` to `text` for consistency.\n *\n * @param (Object)\n * @returns (Object)\n */\nfunction cleanObject(obj) {\n  if (obj.$t !== undefined) {\n    var keysLength = Object.keys(obj).length;\n    if (keysLength === 1 || (keysLength === 2 && obj.type !== undefined)) {\n      return obj.$t;\n    } else {\n      obj.text = obj.$t;\n      delete obj.$t;\n    }\n  }\n\n  return obj;\n}\n\n\n/**\n * Parses a JSON feed.\n *\n * @param (Boolean) buffer If true, will buffer entire object.\n * @return (clarinet.Stream)\n */\nmodule.exports = function(buffer) {\n  var parser = clarinet.createStream();\n\n  // First find the feed object.\n  function findfeed(key) {\n    if (key === 'feed') {\n      parser.removeListener('openobject', findfeed);\n      parser.removeListener('key', findfeed);\n      parser.on('value', onvalue);\n      parser.on('openobject', onopenobject);\n      parser.on('key', onkey);\n      parser.on('closeobject', oncloseobject);\n      parser.on('openarray', onopenarray);\n      parser.on('closearray', onclosearray);\n    }\n  }\n\n  parser.on('openobject', findfeed);\n  parser.on('key', findfeed);\n\n  var stack = [];\n  var currObj = {};\n  var currKey = 'feed';\n  var inArray;\n\n  function onvalue(value) {\n    currObj[currKey] = value;\n    if (stack.length === 1) {\n      parser.emit(currKey, value);\n      if (!buffer) { delete currObj[currKey]; }\n    }\n    if (inArray) {\n      currKey++;\n    }\n  }\n\n  function onopenobject(key) {\n    var obj = currObj[currKey] = {};\n    stack.push({\n      obj: currObj,\n      key: currKey,\n      arr: inArray,\n    });\n    currObj = obj;\n    currKey = key;\n    inArray = false;\n  }\n\n  function onkey(key) {\n    currKey = key;\n  }\n\n  function oncloseobject() {\n    var parent = stack.pop();\n    if (!parent) { return; }\n    currObj = parent.obj;\n    currKey = parent.key;\n    inArray = parent.arr;\n\n    // Clean object.\n    currObj[currKey] = cleanObject(currObj[currKey]);\n\n    // Emit key in feed if curr is parent.\n    if (stack.length === 1) {\n      parser.emit(currKey, currObj[currKey]);\n      if (!buffer) { delete currObj[currKey]; }\n\n    // Or parent is array.\n    } else if (inArray) {\n      if (stack.length === 2) {\n        var event = stack[1].key === 'entry' ? 'item' : stack[1].key;\n        parser.emit(event, currObj[currKey]);\n        if (!buffer) { currObj.splice(currKey, 1); }\n      }\n\n      if (stack.length > 2 || buffer) { currKey++; }\n    }\n  }\n\n  function onopenarray() {\n    var obj = currObj[currKey] = [];\n    stack.push({\n      obj: currObj,\n      key: currKey,\n      arr: inArray,\n    });\n    currObj = obj;\n    currKey = 0;\n    inArray = true;\n  }\n\n  function onclosearray() {\n    var parent = stack.pop();\n    currObj = parent.obj;\n    currKey = parent.key;\n    inArray = parent.arr;\n\n    if (stack.length === 1) {\n      if (!buffer) { delete currObj[currKey]; }\n    } else if (inArray) {\n      currKey++;\n    }\n  }\n\n  parser.done = function() {\n    if (!buffer) { return; }\n    var root = currObj[currKey];\n    root.type = 'json';\n    root.items = root.entry;\n    delete root.entry;\n    return root;\n  };\n\n  return parser;\n};\n"}